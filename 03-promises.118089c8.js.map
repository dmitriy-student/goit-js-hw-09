{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAoBA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUU,MAAAT,IAEpBM,EAAO,CAAEE,SAAAT,EAAUU,MAAAT,G,GAEpBA,E,IAGGU,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAAab,EAAAgB,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,IAAQM,OAAM,SAAAJ,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAAab,EAAAgB,OAAOI,QAAQ,sBAAqCF,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,IA9B3LQ,SAASC,cAAc,QAC/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAMN,IAJA,IAAIZ,EAAQW,EAAME,OAAO,GAAGC,cACtBC,EAAOJ,EAAME,OAAO,GAAGC,cACvBE,EAASL,EAAME,OAAO,GAAGC,cAEtBG,EAAI,EAAGA,GAAKD,EAAQC,IAC3B5B,EAAc4B,EAAGjB,GACjBA,GAASe,EAGXJ,EAAMO,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  let delay = event.target[0].valueAsNumber;\n  const step = event.target[1].valueAsNumber;\n  const amount = event.target[2].valueAsNumber;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay);\n    delay += step;\n  }\n  \n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  promise.then(({ position, delay }) => {Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);}).catch(({ position, delay }) => {Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);});\n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","param","Notify","success","concat","catch","failure","document","querySelector","addEventListener","event","preventDefault","target","valueAsNumber","step","amount","i","currentTarget","reset"],"version":3,"file":"03-promises.118089c8.js.map"}